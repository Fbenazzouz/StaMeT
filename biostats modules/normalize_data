

source("package_loader.R")
load_it( c("MASS", "DESeq","DESeq2" ,"edgeR","limma"));


 
Normalization=function(counts,n1,n2,Norm=c("DESeq2","edgeR","VOOM")){
	#### d√©finition des variables
	condition=factor(c(rep("Cond1",n1),rep("Cond2",n2)))
			######################################################################
	if(Norm=="DESeq2"){
		##################################################
		######		 La Normalisation DESeq 	###########
		###################################################	
		colData <- data.frame (condition,row.names=colnames(counts) )
		dds <- DESeqDataSetFromMatrix (counts, colData , design=~condition)
		cds=estimateSizeFactors(dds) 
		#sizeFactors(cds)
		Data_Norm<-counts(cds,normalized=TRUE) 
		Norm_DESeq2_log2=log2(Data_Norm+1)
		output=Norm_DESeq2_log2}	else{
			if( Norm=="edgeR"){
				###################################################
				######		 La Normalisation edgeR TMM	###########
				###################################################
				cds<- DGEList( counts , group = condition )
				cds<- calcNormFactors(cds,method = "TMM")
				lcpm<-cpm(cds,log=TRUE)
				output=lcpm}else{
					###################################################
					######		 		VOOM				###########
					###################################################			
					design=model.matrix(~0+condition)
					voom_trans<-voom(counts, design,span = 0.5, plot = FALSE,save.plot = FALSE )
					voom_matrix <-  voom_trans$E
					output=voom_matrix}}
	
	return(list(Design=condition,normalized_data=output))
}

